// Kilian Siebert Portfolio Database Schema
// Based on SDD 3.3.2 Database Schema Implementation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum UserRole {
  VISITOR
  REGISTERED
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ContentStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum InquiryStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum InquiryCategory {
  NATURE
  TRAVEL
  EVENT
  VIDEOGRAPHY
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  UNSUBSCRIBED
}

// Core Tables

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  passwordHash          String?
  role                  UserRole  @default(VISITOR)
  firstName             String?
  lastName              String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLogin            DateTime?
  emailVerified        Boolean   @default(false)
  verificationToken    String?
  resetToken           String?
  resetTokenExpires    DateTime?

  // Settings
  portfolioSettings    String?   @default("{}")

  // Relations
  portfolioItems       PortfolioItem[]
  inquiries           Inquiry[]
  newsletterSubscriber NewsletterSubscriber?
  analyticsEvents     AnalyticsEvent[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  coverImage  String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relations
  portfolioItems PortfolioItem[]

  @@map("categories")
}

model PortfolioItem {
  id            String        @id @default(cuid())
  title         String
  description   String?
  mediaType     MediaType
  filePath      String
  thumbnailPath String?
  tags          String        @default("[]")
  metadata      String        @default("{}")
  status        ContentStatus @default(DRAFT)
  featured      Boolean       @default(false)
  sortOrder     Int           @default(0)
  viewCount     Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  publishedAt   DateTime?

  // Foreign Keys
  categoryId    String?
  userId        String?

  // Relations
  category      Category?     @relation(fields: [categoryId], references: [id])
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([status])
  @@index([categoryId])
  @@index([featured])
  @@index([createdAt])
  @@map("portfolio_items")
}

model Inquiry {
  id           String          @id @default(cuid())
  name         String
  email        String
  phone        String?
  subject      String?
  message      String
  category     InquiryCategory @default(OTHER)
  status       InquiryStatus   @default(NEW)
  priority     Priority        @default(MEDIUM)
  budgetRange  String?
  eventDate    DateTime?
  location     String?
  assignedTo   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  resolvedAt   DateTime?

  // Foreign Keys
  userId       String?

  // Relations
  user         User?           @relation(fields: [userId], references: [id])

  // Indexes
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@map("inquiries")
}

model NewsletterSubscriber {
  id                String             @id @default(cuid())
  email             String             @unique
  firstName         String?
  status            SubscriptionStatus @default(PENDING)
  subscriptionDate  DateTime           @default(now())
  verificationToken String?
  unsubscribedAt    DateTime?

  // Foreign Keys
  userId            String?            @unique

  // Relations
  user              User?              @relation(fields: [userId], references: [id])

  @@map("newsletter_subscribers")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  eventType String
  eventData String   @default("{}")
  sessionId String?
  ipAddress String?
  userAgent String?
  referrer  String?
  pageUrl   String?
  timestamp DateTime @default(now())

  // Foreign Keys
  userId    String?

  // Relations
  user      User?    @relation(fields: [userId], references: [id])

  // Indexes
  @@index([timestamp])
  @@index([eventType])
  @@map("analytics_events")
}
